### @configure_input@

# Copyright (C) 1985, 1987-1988, 1993-1995, 1999-2018 Free Software
# Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.


# Note that this file is edited by msdos/sed1v2.inp for MSDOS.  That
# script may need modifying in sync with changes made here.  Try to
# avoid shell-ism because the DOS build has to use the DOS shell.

.SUFFIXES:

SHELL = @SHELL@

# Here are the things that we expect ../configure to edit.
# We use $(srcdir) explicitly in dependencies so as not to depend on VPATH.
srcdir = @srcdir@
top_srcdir = @top_srcdir@
# MinGW CPPFLAGS may use this.
abs_top_srcdir=@abs_top_srcdir@
VPATH = $(srcdir)
CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
EXEEXT = @EXEEXT@
version = @version@
MKDIR_P = @MKDIR_P@
# Don't use LIBS.  configure puts stuff in it that either shouldn't be
# linked with Emacs or is duplicated by the other stuff below.
# LIBS = @LIBS@
LIBOBJS = @LIBOBJS@

lispsource = $(top_srcdir)/lisp
lib = ../lib
libsrc = ../lib-src
etc = ../etc
oldXMenudir = ../oldXMenu
lwlibdir = ../lwlib

# Configuration files for .o files to depend on.
config_h = config.h $(srcdir)/conf_post.h

bootstrap_exe = ../src/bootstrap-emacs$(EXEEXT)

## ns-app if HAVE_NS, else empty.
OTHER_FILES = @OTHER_FILES@

## Flags to pass for profiling builds
PROFILING_CFLAGS = @PROFILING_CFLAGS@

## Flags to pass to the compiler to enable build warnings
WARN_CFLAGS = @WARN_CFLAGS@
WERROR_CFLAGS = @WERROR_CFLAGS@

## Machine-specific CFLAGS.
C_SWITCH_MACHINE=@C_SWITCH_MACHINE@
## System-specific CFLAGS.
C_SWITCH_SYSTEM=@C_SWITCH_SYSTEM@

GNUSTEP_CFLAGS=@GNUSTEP_CFLAGS@
PNG_CFLAGS=@PNG_CFLAGS@

## Define C_SWITCH_X_SITE to contain any special flags your compiler
## may need to deal with X Windows.  For instance, if you've defined
## HAVE_X_WINDOWS and your X include files aren't in a place that your
## compiler can find on its own, you might want to add "-I/..." or
## something similar.  This is normally set by configure.
C_SWITCH_X_SITE=@C_SWITCH_X_SITE@

## Define LD_SWITCH_X_SITE to contain any special flags your loader
## may need to deal with X Windows.  For instance, if your X libraries
## aren't in a place that your loader can find on its own, you might
## want to add "-L/..." or something similar.  Only used if
## HAVE_X_WINDOWS.
## FIXME? configure sets a value for this, but it has never been
## substituted in this or any other Makefile. Cf C_SWITCH_X_SITE.
LD_SWITCH_X_SITE=

## This must come before LD_SWITCH_SYSTEM.
## If needed, a -rpath option that says where to find X windows at run time.
LD_SWITCH_X_SITE_RPATH=@LD_SWITCH_X_SITE_RPATH@

## System-specific LDFLAGS.
LD_SWITCH_SYSTEM=@LD_SWITCH_SYSTEM@

## This holds any special options for linking temacs only (i.e., not
## used by configure).
LD_SWITCH_SYSTEM_TEMACS=@LD_SWITCH_SYSTEM_TEMACS@

## Flags to pass to ld only for temacs.
TEMACS_LDFLAGS = $(LD_SWITCH_SYSTEM) $(LD_SWITCH_SYSTEM_TEMACS)

## If available, the names of the paxctl and setfattr programs.
## On grsecurity/PaX systems, unexec will fail due to a gap between
## the bss section and the heap.  Older versions need paxctl to work
## around this, newer ones setfattr.  See Bug#11398 and Bug#16343.
PAXCTL = @PAXCTL@
SETFATTR = @SETFATTR@
## Commands to set PaX flags on dumped and not-dumped instances of Emacs.
PAXCTL_dumped = @PAXCTL_dumped@
PAXCTL_notdumped = @PAXCTL_notdumped@

## Some systems define this to request special libraries.
LIBS_SYSTEM=@LIBS_SYSTEM@

## -lm, or empty.
LIB_MATH=@LIB_MATH@

## -lpthread, or empty.
LIB_PTHREAD=@LIB_PTHREAD@

LIBIMAGE=@LIBTIFF@ @LIBJPEG@ @LIBPNG@ @LIBGIF@ @LIBXPM@

XCB_LIBS=@XCB_LIBS@
XFT_LIBS=@XFT_LIBS@
LIBX_EXTRA=-lX11 $(XCB_LIBS) $(XFT_LIBS)

FONTCONFIG_CFLAGS = @FONTCONFIG_CFLAGS@
FONTCONFIG_LIBS = @FONTCONFIG_LIBS@
FREETYPE_CFLAGS = @FREETYPE_CFLAGS@
FREETYPE_LIBS = @FREETYPE_LIBS@
LIBOTF_CFLAGS = @LIBOTF_CFLAGS@
LIBOTF_LIBS = @LIBOTF_LIBS@
M17N_FLT_CFLAGS = @M17N_FLT_CFLAGS@
M17N_FLT_LIBS = @M17N_FLT_LIBS@

LIB_ACL=@LIB_ACL@
LIB_CLOCK_GETTIME=@LIB_CLOCK_GETTIME@
LIB_EACCESS=@LIB_EACCESS@
LIB_FDATASYNC=@LIB_FDATASYNC@
LIB_TIMER_TIME=@LIB_TIMER_TIME@

DBUS_CFLAGS = @DBUS_CFLAGS@
DBUS_LIBS = @DBUS_LIBS@
## dbusbind.o if HAVE_DBUS, else empty.
DBUS_OBJ = @DBUS_OBJ@

## xwidgets.o if HAVE_XWIDGETS, else empty.
XWIDGETS_OBJ = @XWIDGETS_OBJ@

LIB_EXECINFO=@LIB_EXECINFO@

SETTINGS_CFLAGS = @SETTINGS_CFLAGS@
SETTINGS_LIBS = @SETTINGS_LIBS@

## gtkutil.o if USE_GTK, else empty.
GTK_OBJ=@GTK_OBJ@

## inotify.o if HAVE_INOTIFY.
## kqueue.o if HAVE_KQUEUE.
## gfilenotify.o if HAVE_GFILENOTIFY.
## w32notify.o if HAVE_W32NOTIFY.
NOTIFY_OBJ = @NOTIFY_OBJ@
NOTIFY_CFLAGS = @NOTIFY_CFLAGS@
NOTIFY_LIBS = @NOTIFY_LIBS@

## -ltermcap, or -lncurses, or -lcurses, or "".
LIBS_TERMCAP=@LIBS_TERMCAP@
## terminfo.o if TERMINFO, else (on MS-DOS only: termcap.o +) tparam.o.
TERMCAP_OBJ=@TERMCAP_OBJ@

LIBXMU=@LIBXMU@

LIBXSM=@LIBXSM@

LIBXTR6=@LIBXTR6@

## $(LIBXMU) -lXt $(LIBXTR6) -lXext if USE_X_TOOLKIT, else $(LIBXSM).
## Only used if HAVE_X_WINDOWS.
LIBXT_OTHER=@LIBXT_OTHER@

## If !HAVE_X11 || USE_GTK, empty.
## Else if USE_X_TOOLKIT, $(lwlibdir)/liblw.a.
## Else $(oldXMenudir)/libXMenu11.a.
LIBXMENU=@LIBXMENU@

## xmenu.o if HAVE_X_WINDOWS, else empty.
XMENU_OBJ=@XMENU_OBJ@
## xterm.o xfns.o xselect.o xrdb.o xsmfns.o xsettings.o if
## HAVE_X_WINDOWS, else empty.
XOBJ=@XOBJ@

# xgselect.o if linking with GLib, else empty
XGSELOBJ=@XGSELOBJ@

TOOLKIT_LIBW=@TOOLKIT_LIBW@

## Only used if HAVE_X11, in LIBX_OTHER.
LIBXT=$(TOOLKIT_LIBW) $(LIBXT_OTHER)

## If HAVE_X11, $(LIBXT) $(LIBX_EXTRA), else empty.
LIBX_OTHER=@LIBX_OTHER@

## LIBXMENU is empty if !HAVE_X_WINDOWS.
## LD_SWITCH_X_SITE should not be used if not using X, but nothing
## sets it at present, and if something ever does, it should be
## configure, which should set it to nil in non-X builds.
LIBX_BASE=$(LIBXMENU) $(LD_SWITCH_X_SITE)

## Used only for GNUstep.
LIBS_GNUSTEP=$(patsubst -specs=%-hardened-ld,,@LIBS_GNUSTEP@)

LIBSOUND= @LIBSOUND@
CFLAGS_SOUND= @CFLAGS_SOUND@

RSVG_LIBS= @RSVG_LIBS@
RSVG_CFLAGS= @RSVG_CFLAGS@

WEBKIT_LIBS= @WEBKIT_LIBS@
WEBKIT_CFLAGS= @WEBKIT_CFLAGS@

CAIRO_LIBS= @CAIRO_LIBS@
CAIRO_CFLAGS= @CAIRO_CFLAGS@

IMAGEMAGICK_LIBS= @IMAGEMAGICK_LIBS@
IMAGEMAGICK_CFLAGS= @IMAGEMAGICK_CFLAGS@

LIBXML2_LIBS = @LIBXML2_LIBS@
LIBXML2_CFLAGS = @LIBXML2_CFLAGS@

GETADDRINFO_A_LIBS = @GETADDRINFO_A_LIBS@

LCMS2_LIBS = @LCMS2_LIBS@
LCMS2_CFLAGS = @LCMS2_CFLAGS@

LIBZ = @LIBZ@

## system-specific libs for dynamic modules, else empty
LIBMODULES = @LIBMODULES@
## dynlib.o emacs-module.o if modules enabled, else empty
MODULES_OBJ = @MODULES_OBJ@

XRANDR_LIBS = @XRANDR_LIBS@
XRANDR_CFLAGS = @XRANDR_CFLAGS@

XINERAMA_LIBS = @XINERAMA_LIBS@
XINERAMA_CFLAGS = @XINERAMA_CFLAGS@

XFIXES_LIBS = @XFIXES_LIBS@
XFIXES_CFLAGS = @XFIXES_CFLAGS@

XDBE_LIBS = @XDBE_LIBS@
XDBE_CFLAGS = @XDBE_CFLAGS@

## widget.o if USE_X_TOOLKIT, otherwise empty.
WIDGET_OBJ=@WIDGET_OBJ@

HYBRID_MALLOC = @HYBRID_MALLOC@

## cygw32.o if CYGWIN, otherwise empty.
CYGWIN_OBJ=@CYGWIN_OBJ@

## fontset.o fringe.o image.o if we have any window system
WINDOW_SYSTEM_OBJ=@WINDOW_SYSTEM_OBJ@

## dosfns.o msdos.o w16select.o if MSDOS.
MSDOS_OBJ =
## w16select.o termcap.o if MSDOS && HAVE_X_WINDOWS.
MSDOS_X_OBJ =

NS_OBJ=@NS_OBJ@
## nsterm.o nsfns.o nsmenu.o nsselect.o nsimage.o ns_fontfile if HAVE_NS.
NS_OBJC_OBJ=@NS_OBJC_OBJ@
## Used only for GNUstep.
GNU_OBJC_CFLAGS=$(patsubst -specs=%-hardened-cc1,,@GNU_OBJC_CFLAGS@)
## w32fns.o w32menu.c w32reg.o fringe.o fontset.o w32font.o w32term.o
## w32xfns.o w32select.o image.o w32uniscribe.o w32cygwinx.o if HAVE_W32,
## w32cygwinx.o if CYGWIN but not HAVE_W32, else empty.
W32_OBJ=@W32_OBJ@
## -lkernel32 -luser32 -lusp10 -lgdi32 -lole32 -lcomdlg32 -lcomctl32
## -lwinspool if HAVE_W32,
## -lkernel32 if CYGWIN but not HAVE_W32, else empty.
W32_LIBS=@W32_LIBS@

## emacs.res if HAVE_W32
EMACSRES = @EMACSRES@
## If HAVE_W32, compiler arguments for including
## the resource file in the binary.
## Cygwin: -Wl,emacs.res
## MinGW: emacs.res
W32_RES_LINK=@W32_RES_LINK@

## Empty if !HAVE_X_WINDOWS
## xfont.o ftfont.o xftfont.o ftxfont.o if HAVE_XFT
## xfont.o ftfont.o ftxfont.o if HAVE_FREETYPE
## ftfont.o ftcrfont.o if USE_CAIRO
## else xfont.o
FONT_OBJ=@FONT_OBJ@

## Empty for MinGW, cm.o for the rest.
CM_OBJ=@CM_OBJ@

LIBGPM = @LIBGPM@

LIBSELINUX_LIBS = @LIBSELINUX_LIBS@

LIBGNUTLS_LIBS = @LIBGNUTLS_LIBS@
LIBGNUTLS_CFLAGS = @LIBGNUTLS_CFLAGS@

LIBSYSTEMD_LIBS = @LIBSYSTEMD_LIBS@
LIBSYSTEMD_CFLAGS = @LIBSYSTEMD_CFLAGS@

JS_LIBS = -L ../../js/dist/bin -lz -lpthread -ldl -lmozjs-62a1 -Wl,--whole-archive ../../js/mozglue/build/libmozglue.a -Wl,--no-whole-archive -pthread 
JS_CFLAGS = -I ../../js/dist/include
JSON_LIBS = @JSON_LIBS@
JSON_CFLAGS = @JSON_CFLAGS@
JSON_OBJ = @JSON_OBJ@

INTERVALS_H = dispextern.h intervals.h composite.h

GETLOADAVG_LIBS = @GETLOADAVG_LIBS@

RUN_TEMACS = ./temacs

# Whether builds should contain details. '--no-build-details' or empty.
BUILD_DETAILS = @BUILD_DETAILS@

UNEXEC_OBJ = @UNEXEC_OBJ@

CANNOT_DUMP=@CANNOT_DUMP@

# 'make' verbosity.
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@

AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 =

AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 =

AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 =

AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 =

# Flags that might be in WARN_CFLAGS but are not valid for Objective C.
NON_OBJC_CFLAGS = -Wignored-attributes -Wignored-qualifiers -Wopenmp-simd

# -Demacs makes some files produce the correct version for use in Emacs.
# MYCPPFLAGS is for by-hand Emacs-specific overrides, e.g.,
# "make MYCPPFLAGS='-DDBUS_DEBUG'".
EMACS_CFLAGS=-Demacs $(MYCPPFLAGS) -I. -I$(srcdir) \
  -I$(lib) -I$(top_srcdir)/lib \
  $(C_SWITCH_MACHINE) $(C_SWITCH_SYSTEM) $(C_SWITCH_X_SITE) \
  $(GNUSTEP_CFLAGS) $(CFLAGS_SOUND) $(RSVG_CFLAGS) $(IMAGEMAGICK_CFLAGS) \
  $(PNG_CFLAGS) $(LIBXML2_CFLAGS) $(DBUS_CFLAGS) \
  $(XRANDR_CFLAGS) $(XINERAMA_CFLAGS) $(XFIXES_CFLAGS) $(XDBE_CFLAGS) \
  $(WEBKIT_CFLAGS) $(LCMS2_CFLAGS) \
  $(SETTINGS_CFLAGS) $(FREETYPE_CFLAGS) $(FONTCONFIG_CFLAGS) \
  $(LIBOTF_CFLAGS) $(M17N_FLT_CFLAGS) $(DEPFLAGS) \
  $(LIBSYSTEMD_CFLAGS) $(JSON_CFLAGS) \
  $(LIBGNUTLS_CFLAGS) $(NOTIFY_CFLAGS) $(CAIRO_CFLAGS) \
  $(WERROR_CFLAGS) $(JS_CFLAGS)
ALL_CFLAGS = $(EMACS_CFLAGS) $(WARN_CFLAGS) $(CFLAGS)
ALL_OBJC_CFLAGS = $(EMACS_CFLAGS) \
  $(filter-out $(NON_OBJC_CFLAGS),$(WARN_CFLAGS)) $(CFLAGS) \
  $(GNU_OBJC_CFLAGS)

chunkls =  atimer.h.chunkl blockinput.h.chunkl buffer.h.chunkl buildobj.h.chunkl category.h.chunkl ccl.h.chunkl character.h.chunkl charset.h.chunkl cm.h.chunkl coding.h.chunkl commands.h.chunkl composite.h.chunkl config.h.chunkl conf_post.h.chunkl cygw32.h.chunkl dispextern.h.chunkl disptab.h.chunkl dosfns.h.chunkl dynlib.h.chunkl emacsgtkfixed.h.chunkl emacs-icon.h.chunkl emacs-module.h.chunkl epaths.h.chunkl font.h.chunkl fontset.h.chunkl frame.h.chunkl ftfont.h.chunkl getpagesize.h.chunkl globals.h.chunkl gnutls.h.chunkl gtkutil.h.chunkl indent.h.chunkl intervals.h.chunkl keyboard.h.chunkl keymap.h.chunkl lisp.h.chunkl macfont.h.chunkl macros.h.chunkl menu.h.chunkl module-env-25.h.chunkl module-env-26.h.chunkl msdos.h.chunkl nsgui.h.chunkl nsterm.h.chunkl process.h.chunkl ptr-bounds.h.chunkl puresize.h.chunkl regex.h.chunkl region-cache.h.chunkl sheap.h.chunkl syntax.h.chunkl sysselect.h.chunkl syssignal.h.chunkl sysstdio.h.chunkl systhread.h.chunkl systime.h.chunkl systty.h.chunkl syswait.h.chunkl termchar.h.chunkl termhooks.h.chunkl termopts.h.chunkl thread.h.chunkl tparam.h.chunkl unexec.h.chunkl w32common.h.chunkl w32font.h.chunkl w32gui.h.chunkl w32.h.chunkl w32heap.h.chunkl w32inevt.h.chunkl w32select.h.chunkl w32term.h.chunkl widget.h.chunkl widgetprv.h.chunkl window.h.chunkl xgselect.h.chunkl xsettings.h.chunkl xterm.h.chunkl xwidget.h.chunkl dispnew.c.chunkl frame.c.chunkl scroll.c.chunkl xdisp.c.chunkl menu.c.chunkl xmenu.c.chunkl window.c.chunkl charset.c.chunkl coding.c.chunkl category.c.chunkl ccl.c.chunkl character.c.chunkl chartab.c.chunkl bidi.c.chunkl cm.c.chunkl term.c.chunkl terminal.c.chunkl xfaces.c.chunkl xterm.c.chunkl xfns.c.chunkl xselect.c.chunkl xrdb.c.chunkl xsmfns.c.chunkl xsettings.c.chunkl gtkutil.c.chunkl emacsgtkfixed.c.chunkl dbusbind.c.chunkl emacs.c.chunkl keyboard.c.chunkl macros.c.chunkl keymap.c.chunkl sysdep.c.chunkl buffer.c.chunkl filelock.c.chunkl insdel.c.chunkl marker.c.chunkl minibuf.c.chunkl fileio.c.chunkl dired.c.chunkl cmds.c.chunkl casetab.c.chunkl casefiddle.c.chunkl indent.c.chunkl search.c.chunkl regex.c.chunkl undo.c.chunkl alloc.c.chunkl data.c.chunkl doc.c.chunkl editfns.c.chunkl callint.c.chunkl eval.c.chunkl floatfns.c.chunkl fns.c.chunkl font.c.chunkl print.c.chunkl lread.c.chunkl syntax.c.chunkl bytecode.c.chunkl process.c.chunkl gnutls.c.chunkl callproc.c.chunkl region-cache.c.chunkl sound.c.chunkl atimer.c.chunkl doprnt.c.chunkl intervals.c.chunkl textprop.c.chunkl composite.c.chunkl xml.c.chunkl lcms.c.chunkl inotify.c.chunkl profiler.c.chunkl decompress.c.chunkl thread.c.chunkl systhread.c.chunkl fontset.c.chunkl fringe.c.chunkl image.c.chunkl xgselect.c.chunkl protos.h.chunkl

chunkl.all: $(chunkls)
	sort $(chunkls) > chunkl.all

%.c.cc: %.c | chunkl.all
	perl $(top_srcdir)/chunkl.pl $*.c < $< > $@
%.h.hh: %.h | chunkl.all
	perl $(top_srcdir)/chunkl.pl $*.h < $< > $@
%.h.chunkl: %.h
	perl $(top_srcdir)/chunkl.pl $*.h --header < $< > $@
%.c.chunkl: %.c
	perl $(top_srcdir)/chunkl.pl $*.c --header < $< > $@
%.cc.o: %.cc
	$(AM_V_CC)$(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $(PROFILING_CFLAGS) $< -o $@

.SECONDARY:
.DELETE_ON_ERROR:

## lastfile must follow all files whose initialized data areas should
## be dumped as pure by dump-emacs.
base_obj = dispnew.c.cc.o frame.c.cc.o scroll.c.cc.o xdisp.c.cc.o menu.c.cc.o $(XMENU_OBJ) window.c.cc.o \
	charset.c.cc.o coding.c.cc.o category.c.cc.o ccl.c.cc.o character.c.cc.o chartab.c.cc.o bidi.c.cc.o \
	$(CM_OBJ) term.c.cc.o terminal.c.cc.o xfaces.c.cc.o $(XOBJ) $(GTK_OBJ) $(DBUS_OBJ) \
	emacs.c.cc.o keyboard.c.cc.o macros.c.cc.o keymap.c.cc.o sysdep.c.cc.o \
	buffer.c.cc.o filelock.c.cc.o insdel.c.cc.o marker.c.cc.o \
	minibuf.c.cc.o fileio.c.cc.o dired.c.cc.o \
	cmds.c.cc.o casetab.c.cc.o casefiddle.c.cc.o indent.c.cc.o search.c.cc.o regex.c.cc.o undo.c.cc.o \
	alloc.c.cc.o data.c.cc.o doc.c.cc.o editfns.c.cc.o callint.c.cc.o \
	eval.c.cc.o floatfns.c.cc.o fns.c.cc.o font.c.cc.o print.c.cc.o lread.c.cc.o $(MODULES_OBJ) \
	syntax.c.cc.o $(UNEXEC_OBJ) bytecode.c.cc.o \
	process.c.cc.o gnutls.c.cc.o callproc.c.cc.o \
	region-cache.c.cc.o sound.c.cc.o atimer.c.cc.o \
	doprnt.c.cc.o intervals.c.cc.o textprop.c.cc.o composite.c.cc.o xml.c.cc.o lcms.c.cc.o $(NOTIFY_OBJ) \
	$(XWIDGETS_OBJ) \
	profiler.c.cc.o decompress.c.cc.o \
	thread.c.cc.o systhread.c.cc.o \
	$(if $(HYBRID_MALLOC),sheap.c.cc.o) \
	$(MSDOS_OBJ) $(MSDOS_X_OBJ) $(NS_OBJ) $(CYGWIN_OBJ) $(FONT_OBJ) \
	$(W32_OBJ) $(WINDOW_SYSTEM_OBJ) $(XGSELOBJ) $(JSON_OBJ)
obj = js.cc.o $(base_obj) $(NS_OBJC_OBJ)

js.cc.o $(base_obj): atimer.h.hh blockinput.h.hh buffer.h.hh buildobj.h.hh category.h.hh ccl.h.hh character.h.hh charset.h.hh cm.h.hh coding.h.hh commands.h.hh composite.h.hh config.h.hh conf_post.h.hh cygw32.h.hh dispextern.h.hh disptab.h.hh dosfns.h.hh dynlib.h.hh emacsgtkfixed.h.hh emacs-icon.h.hh emacs-module.h.hh epaths.h.hh font.h.hh fontset.h.hh frame.h.hh ftfont.h.hh getpagesize.h.hh globals.h.hh gnutls.h.hh gtkutil.h.hh indent.h.hh intervals.h.hh keyboard.h.hh keymap.h.hh lisp.h.hh macfont.h.hh macros.h.hh menu.h.hh module-env-25.h.hh module-env-26.h.hh msdos.h.hh nsgui.h.hh nsterm.h.hh process.h.hh ptr-bounds.h.hh puresize.h.hh regex.h.hh region-cache.h.hh sheap.h.hh syntax.h.hh sysselect.h.hh syssignal.h.hh sysstdio.h.hh systhread.h.hh systime.h.hh systty.h.hh syswait.h.hh termchar.h.hh termhooks.h.hh termopts.h.hh thread.h.hh tparam.h.hh unexec.h.hh w32common.h.hh w32font.h.hh w32gui.h.hh w32.h.hh w32heap.h.hh w32inevt.h.hh w32select.h.hh w32term.h.hh widget.h.hh widgetprv.h.hh window.h.hh xgselect.h.hh xsettings.h.hh xterm.h.hh xwidget.h.hh | chunkl.all

## Object files used on some machine or other.
## These go in the DOC file on all machines in case they are needed.
## Some of them have no DOC entries, but it does no harm to have them
## in the list, in case they ever add any such entries.
SOME_MACHINE_OBJECTS = dosfns.c.cc.o msdos.c.cc.o \
  xterm.c.cc.o xfns.c.cc.o xmenu.c.cc.o xselect.c.cc.o xrdb.c.cc.o xsmfns.c.cc.o fringe.c.cc.o image.c.cc.o \
  fontset.c.cc.o dbusbind.c.cc.o cygw32.c.cc.o \
  nsterm.m.cc.o nsfns.m.cc.o nsmenu.m.cc.o nsselect.m.cc.o nsimage.m.cc.o nsfont.m.cc.o macfont.m.cc.o \
  w32.c.cc.o w32console.c.cc.o w32fns.c.cc.o w32heap.c.cc.o w32inevt.c.cc.o w32notify.c.cc.o \
  w32menu.c.cc.o w32proc.c.cc.o w32reg.c.cc.o w32select.c.cc.o w32term.c.cc.o w32xfns.c.cc.o \
  w16select.c.cc.o widget.c.cc.o xfont.c.cc.o ftfont.c.cc.o xftfont.c.cc.o ftxfont.c.cc.o gtkutil.c.cc.o \
  xsettings.c.cc.o xgselect.c.cc.o termcap.c.cc.o

## gmalloc.o if !SYSTEM_MALLOC && !DOUG_LEA_MALLOC, else empty.
GMALLOC_OBJ=@GMALLOC_OBJ@

## vm-limit.o if !SYSTEM_MALLOC, else empty.
VMLIMIT_OBJ=@VMLIMIT_OBJ@

## ralloc.o if !SYSTEM_MALLOC && REL_ALLOC, else empty.
RALLOC_OBJ=@RALLOC_OBJ@

## Empty on Cygwin and MinGW, lastfile.o elsewhere.
PRE_ALLOC_OBJ=@PRE_ALLOC_OBJ@
## lastfile.o on Cygwin and MinGW, empty elsewhere.
POST_ALLOC_OBJ=@POST_ALLOC_OBJ@

## List of object files that make-docfile should not be told about.
otherobj= $(TERMCAP_OBJ) $(PRE_ALLOC_OBJ) $(GMALLOC_OBJ) $(RALLOC_OBJ) \
  $(POST_ALLOC_OBJ) $(WIDGET_OBJ) $(LIBOBJS)

## All object files linked into temacs.  $(VMLIMIT_OBJ) should be first.
## (On MinGW, firstfile.o should be before vm-limit.o.)
FIRSTFILE_OBJ=@FIRSTFILE_OBJ@
ALLOBJS = $(FIRSTFILE_OBJ) $(VMLIMIT_OBJ) $(obj) $(otherobj)

# Must be first, before dep inclusion!
all: emacs$(EXEEXT) $(OTHER_FILES)
.PHONY: all

AUTO_DEPEND = @AUTO_DEPEND@
DEPDIR = deps
ifeq ($(AUTO_DEPEND),yes)
  DEPFLAGS = -MMD -MF $(DEPDIR)/$*.d -MP
  -include $(ALLOBJS:%.cc.o=$(DEPDIR)/%.d)
else
  DEPFLAGS =
  include $(srcdir)/deps.mk
endif

## This is the list of all Lisp files that might be loaded into the
## dumped Emacs.  Some of them are not loaded on all platforms, but
## the DOC file on every platform uses them (because the DOC file is
## supposed to be platform-independent).
## Note that this list should not include lisp files which might not
## be present, like site-load.el and site-init.el; this makefile
## expects them all to be either present or buildable.
##
## To generate this list from loadup.el, we can either:
## 1) Extract everything matching (load "..."), in which case
## we need to add charprop.el by hand; or
## 2) Extract everything matching (load "...", in which case
## we need to remove leim-list, site-init, and site-load by hand.
## There's not much to choose between these two approaches,
## but the second one seems like it could be more future-proof.
shortlisp =
lisp.mk: $(lispsource)/loadup.el
	@rm -f $@
	${AM_V_GEN}( printf 'shortlisp = \\\n'; \
	sed -n 's/^[ \t]*(load "\([^"]*\)".*/\1/p' $< | \
	  sed -e 's/$$/.elc \\/' -e 's/\.el\.elc/.el/'; \
	echo "" ) > $@

-include lisp.mk
shortlisp_filter = leim/leim-list.el site-load.elc site-init.elc
shortlisp := $(filter-out ${shortlisp_filter},${shortlisp})
## Place loaddefs.el first, so it gets generated first, since it is on
## the critical path (relevant in parallel compilations).
## We don't really need to sort, but may as well use it to remove duplicates.
shortlisp := loaddefs.el loadup.el $(sort ${shortlisp})
lisp = $(addprefix ${lispsource}/,${shortlisp})

## Construct full set of libraries to be linked.
LIBES = $(LIBS) $(W32_LIBS) $(LIBS_GNUSTEP) $(LIBX_BASE) $(LIBIMAGE) \
   $(LIBX_OTHER) $(LIBSOUND) \
   $(RSVG_LIBS) $(IMAGEMAGICK_LIBS) $(LIB_ACL) $(LIB_CLOCK_GETTIME) \
   $(WEBKIT_LIBS) \
   $(LIB_EACCESS) $(LIB_FDATASYNC) $(LIB_TIMER_TIME) $(DBUS_LIBS) \
   $(LIB_EXECINFO) $(XRANDR_LIBS) $(XINERAMA_LIBS) $(XFIXES_LIBS) \
   $(XDBE_LIBS) \
   $(LIBXML2_LIBS) $(LIBGPM) $(LIBS_SYSTEM) $(CAIRO_LIBS) \
   $(LIBS_TERMCAP) $(GETLOADAVG_LIBS) $(SETTINGS_LIBS) $(LIBSELINUX_LIBS) \
   $(FREETYPE_LIBS) $(FONTCONFIG_LIBS) $(LIBOTF_LIBS) $(M17N_FLT_LIBS) \
   $(LIBGNUTLS_LIBS) $(LIB_PTHREAD) $(GETADDRINFO_A_LIBS) $(LCMS2_LIBS) \
   $(NOTIFY_LIBS) $(LIB_MATH) $(LIBZ) $(LIBMODULES) $(LIBSYSTEMD_LIBS) \
   $(JS_LIBS) $(JSON_LIBS)

## FORCE it so that admin/unidata can decide whether these files
## are up-to-date.  Although since charprop depends on bootstrap-emacs,
## and emacs (which recreates bootstrap-emacs) depends on charprop,
## in practice this rule was always run anyway.
$(srcdir)/macuvs.h $(lispsource)/international/charprop.el: \
  bootstrap-emacs$(EXEEXT) FORCE
	$(MAKE) -C ../admin/unidata all EMACS="../$(bootstrap_exe)"

## We require charprop.el to exist before ucs-normalize.el is
## byte-compiled, because ucs-normalize.el needs to load 2 uni-*.el files.
## And ns-win requires ucs-normalize.
$(lispsource)/international/ucs-normalize.elc $(lispsource)/term/ns-win.elc: | \
  $(lispsource)/international/charprop.el

lispintdir = ${lispsource}/international
${lispintdir}/cp51932.el ${lispintdir}/eucjp-ms.el: FORCE
	${MAKE} -C ../admin/charsets $(notdir $@)

charsets = ${top_srcdir}/admin/charsets/charsets.stamp
${charsets}: FORCE
	${MAKE} -C ../admin/charsets all

charscript = ${lispintdir}/charscript.el
${charscript}: FORCE
	$(MAKE) -C ../admin/unidata $(notdir $@)

${lispintdir}/characters.elc: ${charscript:.el=.elc}

## The dumped Emacs is as functional and more efficient than
## bootstrap-emacs, so we replace the latter with the former.
## Strictly speaking, emacs does not depend directly on all of $lisp,
## since not all pieces are used on all platforms.  But DOC depends
## on all of $lisp, and emacs depends on DOC, so it is ok to use $lisp here.
emacs$(EXEEXT): temacs$(EXEEXT) \
                lisp.mk $(etc)/DOC $(lisp) \
                $(lispsource)/international/charprop.el ${charsets}
ifeq ($(CANNOT_DUMP),yes)
	ln -f temacs$(EXEEXT) $@
else
	LC_ALL=C $(RUN_TEMACS) -batch $(BUILD_DETAILS) -l loadup dump
  ifneq ($(PAXCTL_dumped),)
	$(PAXCTL_dumped) $@
  endif
	ln -f $@ bootstrap-emacs$(EXEEXT)
endif

## We run make-docfile twice because the command line may get too long
## on some systems.  Unfortunately, no-one has any idea
## exactly how long the maximum safe command line length is on all the
## various systems that Emacs supports.
##
## $(SOME_MACHINE_OBJECTS) comes before $(obj) because some files may
## or may not be included in $(obj), but they are always included in
## $(SOME_MACHINE_OBJECTS).  Since a file is processed when it is mentioned
## for the first time, this prevents any variation between configurations
## in the contents of the DOC file.
##
$(etc)/DOC: lisp.mk $(libsrc)/make-docfile$(EXEEXT) $(obj) $(lisp)
	$(AM_V_GEN)$(MKDIR_P) $(etc)
	-$(AM_V_at)rm -f $(etc)/DOC
	$(AM_V_at)$(libsrc)/make-docfile -d $(srcdir) \
	  $(SOME_MACHINE_OBJECTS) $(obj) > $(etc)/DOC
	$(AM_V_at)$(libsrc)/make-docfile -a $(etc)/DOC -d $(lispsource) \
	  $(shortlisp)

$(libsrc)/make-docfile$(EXEEXT): $(lib)/libgnu.a
	$(MAKE) -C $(libsrc) make-docfile$(EXEEXT)

buildobj.h: Makefile
	$(AM_V_GEN)for i in $(ALLOBJS); do \
	  echo "$$i" | sed 's,.*/,,; s/\.obj$$/\.o/; s/^/"/; s/$$/",/' \
	    || exit; \
	done >$@.tmp
	$(AM_V_at)mv $@.tmp $@

GLOBAL_SOURCES = js.cc $(base_obj:.c.cc.o=.c) $(NS_OBJC_OBJ:.c.cc.o=.m)

AM_V_GLOBALS = $(am__v_GLOBALS_@AM_V@)
am__v_GLOBALS_ = $(am__v_GLOBALS_@AM_DEFAULT_V@)
am__v_GLOBALS_0 = @echo "  GEN     " globals.h;
am__v_GLOBALS_1 =

gl-stamp: $(libsrc)/make-docfile$(EXEEXT) $(GLOBAL_SOURCES)
	$(AM_V_GLOBALS)$(libsrc)/make-docfile -d $(srcdir) -g $(base_obj) > globals.tmp
	$(AM_V_at)$(top_srcdir)/build-aux/move-if-change globals.tmp globals.h
	$(AM_V_at)echo timestamp > $@

globals.h: gl-stamp; @true

$(ALLOBJS): globals.h

LIBEGNU_ARCHIVE = $(lib)/lib$(if $(HYBRID_MALLOC),e)gnu.a

$(LIBEGNU_ARCHIVE): $(config_h)
	$(MAKE) -C $(lib) all

## We have to create $(etc) here because init_cmdargs tests its
## existence when setting Vinstallation_directory (FIXME?).
## This goes on to affect various things, and the emacs binary fails
## to start if Vinstallation_directory has the wrong value.
temacs$(EXEEXT): $(LIBXMENU) $(ALLOBJS) \
	         $(LIBEGNU_ARCHIVE) $(EMACSRES) ${charsets} ${charscript}
	$(AM_V_CCLD)$(CC) $(ALL_CFLAGS) $(TEMACS_LDFLAGS) $(LDFLAGS) \
	  -o temacs $(ALLOBJS) $(LIBEGNU_ARCHIVE) $(W32_RES_LINK) $(LIBES)
	$(MKDIR_P) $(etc)
ifneq ($(CANNOT_DUMP),yes)
  ifneq ($(PAXCTL_notdumped),)
	$(PAXCTL_notdumped) $@
  endif
endif

## The following oldxmenu-related rules are only (possibly) used if
## HAVE_X11 && !USE_GTK, but there is no harm in always defining them.
$(lwlibdir)/liblw.a: $(config_h) globals.h lisp.h FORCE
	$(MAKE) -C $(lwlibdir) liblw.a
$(oldXMenudir)/libXMenu11.a: FORCE
	$(MAKE) -C $(oldXMenudir) libXMenu11.a
FORCE:
.PHONY: FORCE

.PRECIOUS: ../config.status Makefile
../config.status: $(top_srcdir)/configure.ac $(top_srcdir)/m4/*.m4
	$(MAKE) -C .. $(notdir $@)
Makefile: ../config.status $(srcdir)/Makefile.in
	$(MAKE) -C .. src/$@

doc.c.cc.o: buildobj.h

emacs.res: FORCE
	$(MAKE) -C ../nt ../src/emacs.res

.PHONY: ns-app
ns-app: emacs$(EXEEXT)
	$(MAKE) -C ../nextstep all

.PHONY: mostlyclean clean bootstrap-clean distclean maintainer-clean
.PHONY: versionclean extraclean

mostlyclean:
	rm -f temacs$(EXEEXT) core *.core \#* *.o
	rm -f ../etc/DOC
	rm -f bootstrap-emacs$(EXEEXT) emacs-$(version)$(EXEEXT)
	rm -f buildobj.h
	rm -f globals.h gl-stamp
	rm -f *.res *.tmp
clean: mostlyclean
	rm -f emacs-*.*.*[0-9]$(EXEEXT) emacs$(EXEEXT) $(DEPDIR)/*

## bootstrap-clean is used to clean up just before a bootstrap.
## It should remove all files generated during a compilation/bootstrap,
## but not things like config.status or TAGS.
bootstrap-clean: clean
	rm -f emacs-module.h epaths.h config.h config.stamp
	if test -f ./.gdbinit; then \
	  mv ./.gdbinit ./.gdbinit.save; \
	  if test -f "$(srcdir)/.gdbinit"; then rm -f ./.gdbinit.save; \
	  else mv ./.gdbinit.save ./.gdbinit; fi; \
	fi

distclean: bootstrap-clean
	rm -f Makefile lisp.mk
	rm -fr $(DEPDIR)

maintainer-clean: distclean
	rm -f TAGS
versionclean:
	-rm -f emacs$(EXEEXT) emacs-*.*.*[0-9]$(EXEEXT) ../etc/DOC*
extraclean: distclean
	-rm -f *~ \#*


ETAGS = ../lib-src/etags${EXEEXT}

${ETAGS}: FORCE
	${MAKE} -C ../lib-src $(notdir $@)

ctagsfiles1 = $(wildcard ${srcdir}/*.[hc])
ctagsfiles2 = $(wildcard ${srcdir}/*.m)

## FIXME? In out-of-tree builds, should TAGS be generated in srcdir?

## This does not need to depend on ../lisp and ../lwlib TAGS files,
## because etags "--include" only includes a pointer to the file,
## rather than the file contents.
TAGS: ${ETAGS} $(ctagsfiles1) $(ctagsfiles2)
	${ETAGS} --include=../lisp/TAGS --include=$(lwlibdir)/TAGS \
	  --regex='{c}/[ 	]*DEFVAR_[A-Z_ 	(]+"\([^"]+\)"/\1/' \
	  --regex='{c}/[ 	]*DEFVAR_[A-Z_ 	(]+"[^"]+",[ 	]\([A-Za-z0-9_]+\)/\1/' \
	  $(ctagsfiles1) \
	  --regex='{objc}/[ 	]*DEFVAR_[A-Z_ 	(]+"\([^"]+\)"/\1/' \
	  --regex='{objc}/[ 	]*DEFVAR_[A-Z_ 	(]+"[^"]+",[ 	]\([A-Za-z0-9_]+\)/\1/' \
	  $(ctagsfiles2)

## Arrange to make tags tables for ../lisp and ../lwlib,
## which the above TAGS file for the C files includes by reference.
../lisp/TAGS: FORCE
	$(MAKE) -C ../lisp TAGS ETAGS="$(ETAGS)"

$(lwlibdir)/TAGS: FORCE
	$(MAKE) -C $(lwlibdir) TAGS ETAGS="$(ETAGS)"

tags: TAGS ../lisp/TAGS $(lwlibdir)/TAGS
.PHONY: tags


### Bootstrapping.

## Bootstrapping right is difficult because of the circular dependencies.
## Furthermore, we have to deal with the fact that many compilation targets
## such as loaddefs.el or *.elc can typically be produced by any old
## Emacs executable, so we would like to avoid rebuilding them whenever
## we build a new Emacs executable.
##
## (In other words, changing a single file src/foo.c would force
## dumping a new bootstrap-emacs, then re-byte-compiling all preloaded
## elisp files, and only then dump the actual src/emacs, which is not
## wrong, but is overkill in 99.99% of the cases.)
##
## To solve the circularity, we use 2 different Emacs executables,
## "emacs" is the main target and "bootstrap-emacs" is the one used
## to build the *.elc and loaddefs.el files.
## To solve the freshness issue, in the past we tried various clever tricks,
## but now that we require GNU make, we can simply specify
## bootstrap-emacs$(EXEEXT) as an order-only prerequisite.

%.elc: %.el | bootstrap-emacs$(EXEEXT)
	@$(MAKE) -C ../lisp EMACS="$(bootstrap_exe)" THEFILE=$< $<c

## VCSWITNESS points to the file that holds info about the current checkout.
## We use it as a heuristic to decide when to rebuild loaddefs.el.
## If empty it is ignored; the parent makefile can set it to some other value.
VCSWITNESS =

$(lispsource)/loaddefs.el: $(VCSWITNESS) | bootstrap-emacs$(EXEEXT)
	$(MAKE) -C ../lisp autoloads EMACS="$(bootstrap_exe)"

## Dump an Emacs executable named bootstrap-emacs containing the
## files from loadup.el in source form.
bootstrap-emacs$(EXEEXT): temacs$(EXEEXT)
	$(MAKE) -C ../lisp update-subdirs
ifeq ($(CANNOT_DUMP),yes)
	ln -f temacs$(EXEEXT) $@
else
	$(RUN_TEMACS) --batch $(BUILD_DETAILS) --load loadup bootstrap
  ifneq ($(PAXCTL_dumped),)
	$(PAXCTL_dumped) emacs$(EXEEXT)
  endif
	mv -f emacs$(EXEEXT) $@
endif
	@: Compile some files earlier to speed up further compilation.
	$(MAKE) -C ../lisp compile-first EMACS="$(bootstrap_exe)"
